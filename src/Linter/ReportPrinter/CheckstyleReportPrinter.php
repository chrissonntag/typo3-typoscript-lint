<?php declare(strict_types=1);

namespace Helmich\TypoScriptLint\Linter\ReportPrinter;

use DOMDocument;
use DOMElement;
use DOMException;
use Helmich\TypoScriptLint\Application;
use Helmich\TypoScriptLint\Linter\Report\File;
use Helmich\TypoScriptLint\Linter\Report\Issue;
use Helmich\TypoScriptLint\Linter\Report\Report;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Report printer that generates XML documents as generated by checkstyle [1].
 *
 * These reports are well-suited for being used in continuous integration
 * environments like Jenkins [2].
 *
 * [1] http://checkstyle.sourceforge.net/
 * [2] http://jenkins-ci.org/
 *
 * @package    Helmich\TypoScriptLint
 * @subpackage Linter\ReportPrinter
 */
class CheckstyleReportPrinter implements Printer
{

    private OutputInterface $output;

    /**
     * Constructs a new checkstyle report printer.
     *
     * @param OutputInterface $output Output stream to write on. Might be STDOUT or a file.
     */
    public function __construct(OutputInterface $output)
    {
        $this->output = $output;
    }

    /**
     * Writes a report in checkstyle XML format.
     *
     * @param Report $report The report to print.
     * @return void
     * @throws PrinterException
     */
    public function writeReport(Report $report): void
    {
        try {
            $xml = $this->buildReportXMLDocument($report);
            $this->output->write($xml->saveXML());
        } catch (DOMException $error) {
            throw new PrinterException('Could not generate checkstyle report: ' . $error->getMessage(),  $error);
        }
    }

    /**
     * @throws DOMException
     */
    private function buildReportXMLDocument(Report $report): DOMDocument
    {
        $xml = new DOMDocument('1.0', 'UTF-8');

        $root = $xml->createElement('checkstyle');
        $root->setAttribute('version', Application::APP_NAME . '-' . Application::APP_VERSION);

        foreach ($report->getFiles() as $file) {
            $root->appendChild($this->buildElementForFile($xml, $file));
        }

        $xml->appendChild($root);
        $xml->formatOutput = true;

        return $xml;
    }

    /**
     * @throws DOMException
     */
    public function buildElementForIssue(DOMDocument $xml, Issue $issue): DOMElement
    {
        $xmlWarning = $xml->createElement('error');
        $xmlWarning->setAttribute('line', $issue->getLine() !== null ? ((string)$issue->getLine()) : "");
        $xmlWarning->setAttribute('severity', $issue->getSeverity());
        $xmlWarning->setAttribute('message', $issue->getMessage());
        $xmlWarning->setAttribute('source', $issue->getSource());

        $column = $issue->getColumn();
        if ($column !== null) {
            $xmlWarning->setAttribute('column', "" . $column);
        }
        return $xmlWarning;
    }

    /**
     * @throws DOMException
     */
    public function buildElementForFile(DOMDocument $xml, File $file): DOMElement
    {
        $xmlFile = $xml->createElement('file');
        $xmlFile->setAttribute('name', $file->getFilename());

        foreach ($file->getIssues() as $issue) {
            $xmlFile->appendChild($this->buildElementForIssue($xml, $issue));
        }

        return $xmlFile;
    }
}
